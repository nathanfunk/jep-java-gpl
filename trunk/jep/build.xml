<!--
=============================================================================
  build.xml (ant build script)

  JEP - Java Expression Parser
  http://www.singularsys.com/jep

  Setting up your system to compile JEP:
    1. Set the JAVACCHOME environment variable to the location of the
       library directory of JavaCC (e.g. C:\apps\javacc\bin\lib)
    2. This script uses Java JDK 1.1.8 to check for compatibility.
	   Specifically the "classes.zip" file is required. Install the old
	   JDK 1.1.8 and set the "bootclasspath" property to the location of
	   the 1.1.8 classes.zip file. You can still use a newer SDK for 
	   compiling, the classes.zip file is only needed to ensure
	   compatibility.
=============================================================================
-->

<project name="JEP" default="compile" basedir=".">
	
	<!-- set global properties for this build -->
	<property name="src"     value="src"/>
	<property name="bin"     value="bin"/>
	<property name="build"   value="build"/>
	<property name="dist"    value="dist"/>
	<property name="doc"     value="doc"/>
	<property name="lib"     value="lib"/>
	<!-- <property name="website" value="website"/> -->
	<property name="version" value="2.25a"/>
	<property name="jar"     value="${app.name}-${version}.jar"/>
	<property name="src.zip" value="${app.name}-${version}-src.zip"/>
	<property name="src.tar.gz" value="${app.name}-${version}-src.tar.gz"/>
	<property name="disttemp"   value="disttemp"/>
	<property environment="env"/>
	<property name="javacchome" value="${env.JAVACCHOME}"/>
	<property name="bootclasspath" value="c:\jdk1.1.8\lib\classes.zip"/>
	<property name="classpath" value="${lib}/junit.jar"/>

	<taskdef name="jjtree"
	classname="org.apache.tools.ant.taskdefs.optional.javacc.JJTree" />

	<taskdef name="javacc"
	classname="org.apache.tools.ant.taskdefs.optional.javacc.JavaCC" />

	

<!--======================================================================-->
<!-- INIT -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>

		<!-- Ensure JavaCC is present -->
		<available property="javacc.present"
			classname="COM.sun.labs.javacc.Main"
			classpath="${javacchome}/JavaCC.zip" />
	</target>

<!--======================================================================-->
<!-- JJTREE -->
	<target name="jjtree" depends="init" if="javacc.present">
		<jjtree
			target="${src}/org/nfunk/jep/Parser.jjt"
			javacchome="${javacchome}"
		/>
	</target>

<!--======================================================================-->
<!-- JAVACC -->
	<target name="javacc" depends="jjtree" if="javacc.present">
		<javacc
			target="${src}/org/nfunk/jep/Parser.jj"
			javacchome="${javacchome}"
		/>
	</target>

      
<!--======================================================================-->
<!-- COMPILE -->
	<target name="compile" depends="javacc">
		<!-- Create the build directory -->
		<mkdir dir="${build}"/>

		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}"
		       destdir="${build}"
		       classpath="${classpath}"
		       target="1.1">
			<bootclasspath>
				<pathelement path="${bootclasspath}"/>
			</bootclasspath>
		</javac>
	</target>


<!--======================================================================-->
<!-- JAVADOC -->
	<target name="javadoc" depends="init">
		<delete dir="doc/javadoc"/>
		<mkdir dir="doc/javadoc"/>
		<javadoc packagenames="org.nfunk.jep.*"
				sourcepath="src"
				destdir="doc/javadoc"
				windowtitle="JEP API">
			<bottom><![CDATA[<A HREF=\"http://www.singularsys.com/jep\" TARGET=\"_blank\">http://www.singularsys.com/jep</A> Copyright &#169; 2000 Nathan Funk]]></bottom>
		</javadoc>
	</target>


<!--======================================================================-->
<!-- JAR -->
	<target name="jar" depends="compile">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}"/>

		<!-- Main jar -->
		<jar jarfile="${dist}/jep-${version}.jar"
		     basedir="${build}"
		     includes="org/nfunk/jep/**"/>
		
		<!-- Examples jar -->
		<jar jarfile="${dist}/jep-${version}-withexamples.jar"
		     basedir="${build}"
		     includes="org/nfunk/jep/**,org/nfunk/jepexamples/**"/>
	</target>

<!--======================================================================-->
<!-- DIST -->
	<target name="dist" depends="jar,javadoc">
		<!-- Create a temp dir for contents of packages-->
		<mkdir dir="${disttemp}/jep-${version}"/>

		<!-- Copy jar -->
		<copy file="${dist}/jep-${version}.jar" todir="${disttemp}/jep-${version}"/>

		<!-- Copy web site 
		<mkdir dir="${doc}/website"/>
		<copy todir="${doc}/website">
			<fileset dir="${website}/htdocs"
					includes="**"
					excludes="_notes/**, Library/**, Templates/**"/>
		</copy>
		-->

		<!-- Copy src files -->
		<!-- define filterset -->
		<filterset id="sourcefilters">
			<filter token="header" value="JEP - Java Math Expression Parser ${version}"/>
			<filter token="date" value="      ${TODAY}"/>
			<filter token="copyright" value="      (c) Copyright 2002, Nathan Funk"/>
			<filter token="license" value="      See LICENSE.txt for license information."/>
		</filterset>
		<copy todir="${disttemp}/jep-${version}">
			<fileset dir="."
					includes="
					 ${src}/org/nfunk/jep/**,
					 ${src}/org/nfunk/jepexamples/**"/>
			<filterset refid="sourcefilters"/>
		</copy>

		<!-- Copy doc, bin, build, and single files -->
		<copy todir="${disttemp}/jep-${version}">
			<fileset dir="."
					includes="
					 ${doc}/**,
					 ${bin}/**,
					 ${lib}/**,
					 ${build}/**,
					 build.xml,
					 compile.bat,
					 LICENSE.txt,
					 README.html"/>
		</copy>

		<!-- zip file -->
		<delete file="${dist}/jep-${version}.zip"/>
		<zip zipfile="${dist}/jep-${version}.zip"
		     basedir="${disttemp}"
		     >
		</zip>

		<!-- tar.gz file -->
		<delete file="${dist}/jep-${version}.tar.gz"/>
		<tar tarfile="${dist}/jep-${version}.tar"
		     basedir="${disttemp}"
		     >
		</tar>
		<gzip zipfile="${dist}/jep-${version}.tar.gz"
		      src="${dist}/jep-${version}.tar"/>

		<!-- clean up temporary files -->
		<delete file="${dist}/jep-${version}.tar"/>
		<delete dir="${disttemp}" />
	</target>


<!--======================================================================-->
<!-- CLEAN -->
	<target name="clean">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>


<!--======================================================================-->
<!-- EOLUNIX -->
	<target name="eolunix">
		<fixcrlf srcdir="${src}"
			eol="lf" eof="remove"/>
	</target>
</project>

