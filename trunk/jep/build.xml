<!--
=============================================================================

  build.xml (ant build script)

  JEP - Java Expression Parser
  http://www.singularsys.com/jep

  Setting up your system to compile JEP:
  
  - Required: Set the JAVACCHOME environment variable to the location of the
    library directory of JavaCC (e.g. C:\apps\javacc\bin\lib)
  
  - Optional: This build file can ensure API compatibility with Java 1.2 by 
    using the bootclasspath option for cross-compilation when compiling. For 
    this a Java 1.2 JRE needs to be available on the system. The location 
    of the JRE is set in the JRE1_2HOME environment variable 
    (e.g. C:\jre1.2.2). The file {JRE1_2HOME}/lib/rt.jar must exist.

=============================================================================
-->

<project name="JEP" default="compile" basedir=".">
	
	<property name="version" value="2.4.0"/>
	<property name="djep-version" value="1.1.0"/>

	<!-- library locations -->
	<property environment="env"/>
	<property name="javacchome" value="${env.JAVACCHOME}"/>
	<property name="oldjrehome" value="${env.JRE1_2HOME}"/>
	<!-- set global properties for this build -->
	<property name="src"     value="src"/>
	<property name="bin"     value="bin"/>
	<property name="build"   value="build"/>
	<property name="dist"    value="dist"/>
	<property name="doc"     value="doc"/>
	<property name="lib"     value="lib"/>
	<property name="jar"     value="${app.name}-${version}.jar"/>
	<property name="src.zip" value="${app.name}-${version}-src.zip"/>
	<property name="src.tar.gz"    value="${app.name}-${version}-src.tar.gz"/>
	<property name="disttemp"      value="disttemp"/>
	<property name="classpath"     value="${lib}/junit.jar;${lib}/Jama-1.0.2.jar"/>
	<property name="bootclasspath" value="${oldjrehome}/lib/rt.jar"/>
	<!-- <property name="website" value="website"/> -->

	<taskdef name="jjtree"
	classname="org.apache.tools.ant.taskdefs.optional.javacc.JJTree" />

	<taskdef name="javacc"
	classname="org.apache.tools.ant.taskdefs.optional.javacc.JavaCC" />

<!--======================================================================-->
<!-- INIT -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Echo environment variables -->
		<echo message="JAVACCHOME = ${javacchome}"/>
		<echo message="JRE1_2HOME = ${oldjrehome}"/>
		<echo message="bootclasspath = ${bootclasspath}"/>

		<!-- Ensure JavaCC is present -->
		<!-- TODO get this working -->
		<!--			classpath="${javacchome}/JavaCC.zip"
		<available property="javacc.2.present"
				classname="COM.sun.labs.javacc.Main">
  <classpath>
    <pathelement location="${javacchome}/JavaCC.zip"/>
  </classpath>
  </available>

		<available property="javacc.3.present"
			classname="org.javacc.parser.Main"
			classpath="${javacchome}/javacc.jar" />
		<condition property="javacc.present">
				<or>
						<istrue value="javacc.2.present"/>
						<istrue value="javacc.3.present"/>
				</or>
		</condition>
		<condition property="javacc.not.present">
				<not>
						<istrue value="javacc.present"/>
				</not>
		</condition>
		<antcall target="print.javacc.not.present"/>-->
</target>
<!--
	<target name="print.javacc.not.present" if="javacc.not.present">
			<echo message="JavaCC 2 or 3 is not present. Parser.jjt will not be processed!"/>
	</target>
	-->

<!--======================================================================-->
<!-- JJTREE -->
<target name="jjtree" depends="init"><!-- if="javacc.present">
		<echo message="javacc.present is true"/>-->
		<jjtree
			target="${src}/org/nfunk/jep/Parser.jjt"
			outputdirectory="${src}/org/nfunk/jep/"
			javacchome="${javacchome}"
		/>
	</target>

<!--======================================================================-->
<!-- JAVACC -->
<target name="javacc" depends="jjtree"><!--if="javacc.present">
		<echo message="javacc.present is true"/>-->
		<javacc
			target="${src}/org/nfunk/jep/Parser.jj"
			outputdirectory="${src}/org/nfunk/jep/"
			javacchome="${javacchome}"
		/>
	</target>


      
<!--======================================================================-->
<!-- COMPILE -->
	
	<!-- Compiles with or without compatibility ensurance-->
	<target name="compile" depends="compile-with-ce, compile-without-ce">
	</target>
	
	<!-- Compiles without ensuring compatibility if JRE1_2HOME is not set -->
	<target name="compile-without-ce" depends="javacc" unless="env.JRE1_2HOME">
		<echo message="Compiling without ensuring compatibility"/>
		<!-- Create the build directory -->
		<mkdir dir="${build}"/>

		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}"
		       destdir="${build}"
		       classpath="${classpath}"
		       source="1.2"
			   target="1.2"/>
	</target>
	
	<!-- Compiles with ensuring compatibility if JRE1_2HOME is set -->
	<target name="compile-with-ce" depends="javacc" if="env.JRE1_2HOME">
		
		<!-- Create the build directory -->
		<mkdir dir="${build}"/>

		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}"
		       destdir="${build}"
		       classpath="${classpath}"
		       source="1.2"
			   target="1.2"
		       bootclasspath="${bootclasspath}"/>
	</target>
	


<!--======================================================================-->
<!-- JAVADOC -->
	<target name="javadoc" depends="init">
		<delete dir="doc/javadoc"/>
		<mkdir dir="doc/javadoc"/>
		<javadoc packagenames="org.nfunk.jep.*,org.lsmp.*"
				sourcepath="src"
				destdir="doc/javadoc"
				windowtitle="JEP API"
				breakiterator="yes"
				source="1.4">
			<bottom><![CDATA[<A HREF=\"http://www.singularsys.com/jep\" TARGET=\"_blank\">http://www.singularsys.com/jep</A> Copyright &#169; 2004 Singular Systems]]></bottom>
		</javadoc>
	</target>

<!--======================================================================-->
<!-- JAVACC -->
	<target name="jjdoc" depends="javacc">
		<mkdir dir="${doc}/grammar"/>
		<jjdoc
			target="${src}/org/nfunk/jep/Parser.jj"
			outputfile="${doc}/grammar/grammar.html"
			javacchome="${javacchome}"
		/>
		<jjdoc
			target="${src}/org/nfunk/jep/Parser.jj"
			outputfile="${doc}/grammar/grammar.txt"
			text="true"
			javacchome="${javacchome}"
		/>
	</target>

	
	
<!--======================================================================-->
<!-- JAR -->
	<target name="jar" depends="compile">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}"/>

		<!-- JEP jar without examples or testing classes-->
		<jar jarfile="${dist}/jep-${version}.jar"
		     basedir="${build}"
		     includes="org/nfunk/jep/**"/>
		
		<!-- DJEP jar without examples or testing classes -->
		<jar jarfile="${dist}/djep-${djep-version}.jar"
		     basedir="${build}"
		     includes="org/lsmp/djep/**"/>
		
		<!-- JEP Examples jar for web site -->
		<!-- TODO: DJEP examples as well? -->
		<jar jarfile="${dist}/jep-${version}-withexamples.jar"
		     basedir="${build}"
		     includes="org/nfunk/jep/**,org/nfunk/jepexamples/**"/>
	</target>

<!--======================================================================-->
<!-- DIST -->
	<target name="dist" depends="jar,javadoc">
		<!-- Create a temp dir for contents of packages-->
		<mkdir dir="${disttemp}/jep-${version}"/>

		<!-- Copy jars -->
		<copy file="${dist}/jep-${version}.jar" todir="${disttemp}/jep-${version}"/>
		<copy file="${dist}/djep-${djep-version}.jar" todir="${disttemp}/jep-${version}"/>

		<!-- Copy src files -->
		<!-- define filterset -->
		<filterset id="sourcefilters">
			<filter token="header" value="JEP - Java Math Expression Parser ${version}"/>
			<filter token="date" value="      ${TODAY}"/>
			<filter token="copyright" value="      (c) Copyright 2006, Nathan Funk and Richard Morris"/>
			<filter token="license" value="      See LICENSE.txt for license information."/>
		</filterset>
		<!-- copy source files with filter to disttemp -->
		<copy todir="${disttemp}/jep-${version}">
			<fileset dir="."
					includes="${src}/**"/>
			<filterset refid="sourcefilters"/>
		</copy>

		<!-- Copy doc, bin, build, and single files -->
		<copy todir="${disttemp}/jep-${version}">
			<fileset dir="."
					includes="
					 ${doc}/**,
					 ${bin}/**,
					 ${lib}/**,
					 ${build}/**,
					 build.xml,
					 compile.bat,
					 LICENSE.txt,
					 CHANGES.txt,
					 README.html"/>
		</copy>

		<!-- zip file -->
		<delete file="${dist}/jep-djep-${version}.zip"/>
		<zip zipfile="${dist}/jep-djep-${version}.zip"
		     basedir="${disttemp}"
		     >
		</zip>

		<!-- clean up temporary files -->
		<delete dir="${disttemp}" />
	</target>


<!--======================================================================-->
<!-- CLEAN -->
	<target name="clean">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
		<delete dir="${doc}/grammar"/>
	</target>


<!--======================================================================-->
<!-- EOLUNIX -->
	<target name="eolunix">
		<fixcrlf srcdir="${src}"
			eol="lf" eof="remove"/>
	</target>
</project>

