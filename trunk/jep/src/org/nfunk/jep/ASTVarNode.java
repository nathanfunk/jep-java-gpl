/*****************************************************************************

JEP - Java Expression Parser
    JEP is a Java package for parsing and evaluating mathematical 
	expressions. It currently supports user defined variables, 
	constant, and functions. A number of common mathematical 
	functions and constants are included.

Author: Nathan Funk
Copyright (C) 2000 Nathan Funk

    JEP is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    JEP is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with JEP; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*****************************************************************************/
/* Generated By:JJTree: Do not edit this line. ASTVarNode.java */

package org.nfunk.jep;

import java.util.*;
/**
 * Variable Node
 */
public class ASTVarNode extends SimpleNode {
	
	private SymbolTable symTab;
	private String varName;
	
	public ASTVarNode(int id) {
		super(id);
		varName = "";
	}
	
	public ASTVarNode(Parser p, int id) {
		super(p, id);
	}
	
	
	/** Accept the visitor. **/
	public Object jjtAccept(ParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public void setSymbolTable(SymbolTable symTab_in)
	{
		symTab = symTab_in;
	}
	
	public void setName(String varName_in)
	{
		varName = varName_in;
	}
	
	public String getName()
	{
		return varName;
	}

	public Object getValue()
	{
		// TODO: extend with exception throwing?
		if (symTab!=null && symTab.containsKey(varName))
			return symTab.get(varName);
		
		return null;
	}

	/**
	* Looks for the value of the variable in the symbolTable. If it
	* is found, the Object of the value is returned, otherwise an
	* exception is thrown.
	*
	public void evaluate(Stack stack) throws ParseException
	{
		if (symTab!=null && symTab.containsKey(varName))
			stack.push(symTab.get(varName));
		else
			throw new ParseException("Variable \"" + varName +
			"\" was not found in the symbol table.");
	}
*/

	/**
	* Creates a string containing the variable's name and value
	*/
	public String toString()
	{
		String temp = "Variable: \"" + getName() + "\"";
		
		try
		{
			temp += " = " + symTab.get(varName);
		}
		catch (Exception e)
		{
		}
		return temp;
	}
}
